version: 2.1

# Our CircleCI dependencies
orbs:
  rust: circleci/rust@1.5.0
  gh: circleci/github-cli@1.0.4

# The main workflows executed for Rover
workflows:
  lint:
    jobs:
      - xtask:
          name: Lint (<< matrix.rust_channel >> rust on << matrix.platform >>)
          matrix:
            parameters:
              platform: [ubuntu_gnu]
              rust_channel: [stable]
              command: [lint]
  test:
    jobs:
      - xtask:
          name: Test (<< matrix.rust_channel >> rust on << matrix.platform >>)
          matrix:
            parameters:
              platform: [ubuntu_gnu, ubuntu_musl, macos, windows]
              rust_channel: [stable]
              command: [test]

jobs:
  xtask:
    parameters:
      rust_channel:
        type: enum
        enum: ["stable", "nightly"]
        default: stable
      platform:
        type: executor
      command:
        type: enum
        enum: ["lint", "test"]
    executor: << parameters.platform >>
    steps:
      - checkout
      - install_system_deps:
          platform: << parameters.platform >>
      - install_node:
          npm_version: "7.21.1"
          node_version: "14.17.1"
          platform: << parameters.platform >>
      - install_rust_toolchain:
          rust_channel: << parameters.rust_channel >>
          platform: << parameters.platform >>
      - exec_xtask:
          command: << parameters.command >>
          platform: << parameters.platform >>

# The machines we use to run our workflows on
executors:
  ubuntu_gnu: &ubuntu_gnu_executor
    machine:
      image: ubuntu-1604:202104-01
    resource_class: xlarge
    environment:
      XTASK_TARGET: "x86_64-unknown-linux-gnu"

  ubuntu_musl: &ubuntu_musl_executor
    docker:
      - image: cimg/base:stable
    resource_class: xlarge
    environment:
      XTASK_TARGET: "x86_64-unknown-linux-musl"
  
  macos: &macos_executor
    macos:
      xcode: "11.4"
    resource_class: medium
    environment:
      XTASK_TARGET: "x86_64-apple-darwin"

  windows: &windows_executor
    machine:
      image: 'windows-server-2019-vs2019:stable'
    resource_class: windows.xlarge
    shell: powershell.exe -ExecutionPolicy Bypass
    environment:
      XTASK_TARGET: "x86_64-pc-windows-msvc"

# reusable command snippets can be referred to in any `steps` object
commands:
  install_node:
    parameters:
      npm_version:
        type: string
      node_version:
        type: string
      platform:
        type: executor
    steps:
      - when:
          condition:
            equal: [ *ubuntu_gnu_executor, << parameters.platform >> ]
          steps:
            - run: 
                name: Put $NVM_DIR in $BASH_ENV
                command: |
                  echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
                  echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
            - run:
                name: Install and set node version
                command: |
                  nvm install v<< parameters.node_version >>
                  nvm use v<< parameters.node_version >>
            - run:
                name: Set npm version
                command: npm i -g npm@<< parameters.npm_version >>
            - run:
                name: Assert Node.js version
                command: test "$(node --version)" = "v${NODE_VERSION}"
            - run:
                name: Assert npm version
                command: test "$(npm --version)" = "${NPM_VERSION}"

  install_rust_toolchain:
    parameters:
      rust_channel:
        type: enum
        enum: ["stable", "nightly"]
      platform:
        type: executor
    steps:
      - unless:
          condition:
            equal: [ *windows_executor, << parameters.platform >> ]
          steps:
            - rust/install:
                version: << parameters.rust_channel >>
            - run:
                name: Install specific rust toolchain
                command: rustup target add $XTASK_TARGET
      - when:
          condition:
            equal: [ *windows_executor, << parameters.platform >> ]
          steps:
            - run:
                name: Install rustup
                environment:
                  # Override auto-detection of RAM for rustc install.
                  # https://github.com/rust-lang/rustup/issues/2229#issuecomment-585855925
                  RUSTUP_UNPACK_RAM: "21474836480"
                command: |
                  $installer_dir = "$Env:TEMP"
                  echo "Downloading rustup"
                  (New-Object System.Net.WebClient).DownloadFile("https://win.rustup.rs/x86_64", "$installer_dir\rustup-init.exe")
                  echo "Installing rustup"
                  & $installer_dir\rustup-init.exe --profile minimal -y
                  exit $LASTEXITCODE
            - run:
                name: Special case for Windows because of ssh-agent
                command: |
                  Add-Content -path "${Env:USERPROFILE}\.cargo\config.toml" @"
                  [net]
                  git-fetch-with-cli = true
                  "@

  install_system_deps:
    parameters:
      platform:
        type: executor
    steps:
      - when:
          condition:
            or:
              - equal: [ *ubuntu_gnu_executor, << parameters.platform >> ]
              - equal: [ *ubuntu_musl_executor, << parameters.platform >> ]
          steps:
            - ubuntu_update_apt
            - ubuntu_install_openssl
      - when:
          condition:
            equal: [ *ubuntu_musl_executor, << parameters.platform >> ]
          steps:
            - ubuntu_install_musl_tools

  exec_xtask:
    parameters:
      command:
        type: enum
        enum: [lint, test]
      platform:
        type: executor
    steps:
      - restore_cache:
          keys:
            - rust-target-v1-<< parameters.platform >>-{{ checksum "Cargo.lock" }}
      - when:
          condition:
            # cargo xtask lint is the only xtask command that doesn't take a target
            equal: [ lint, << parameters.command >> ]
          steps:
            - run:
                command: cargo xtask << parameters.command >> --verbose
      - when:
          condition:
            not: 
              equal: [ lint, << parameters.command >> ]
          steps:
            - run:
                command: cargo xtask << parameters.command >> --target $XTASK_TARGET --verbose
      - save_cache:
          key: rust-target-v1-<< parameters.platform >>-{{ checksum "Cargo.lock" }}
          paths:
            - target/
  
  ubuntu_update_apt:
    steps:
      - run:
          name: Update apt repositories
          command: sudo apt-get update
  
  ubuntu_install_openssl:
    steps:
      - run:
          name: Install OpenSSL
          command: sudo apt-get install -y libssl-dev
  
  ubuntu_install_musl_tools:
    steps:
      - run:
          name: Install musl-tools
          command: sudo apt-get install -y musl-tools